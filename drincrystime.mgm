// Parameters (to be set programmatically eventually)
q := 25; // order of base field, must be prime power
n := 600; // extension degree of L over F_q
m := 10; // extension degree of intermediate field over F_q
r := 5; // drinfeld module rank
prec := n div m;

phi_x_list := [];

/* Algebraic Constructions */
Sprint("Starting code");
Fq := FiniteField(q);
Sprint("Base field constructed");
A<x> := PolynomialRing(Fq);
Sprint("Polynomial ring constructed");
c := Fq.1;
L_mod := RandomPrimePolynomial(A, n);
//L_mod := x^6 + (c + 1)*x^4 + x^3 + (c + 1)*x^2 + c*x + 1;
Sprint("Constructing extension field...");
L := ext<Fq | L_mod>;
Sprint("Extension field constructed");
dm := [L | Random(L): i in [0..r] ];
Sprint("prepping");
while Degree(MinimalPolynomial(dm[1], Fq)) ne m do
	Sprint("Finding primitive element");
	//genr := PrimitiveElement(L);
	Sprint("Computing exponent...");
	//expra := (q^n - 1) div (q^m - 1);
	Sprint("exponentiating...");
	//dm[1] := genr^expra;

	// Alternate
	Sprint("Computing embedding");
	sub_mod := RandomPrimePolynomial(A, m);
	Fqp := ext<Fq | sub_mod>;
	Sprint("Embedding element");
	Embed(Fqp, L);
	dm[1] := Fqp.1;

end while; 
// need to force the intermediate field to have degree m here
Sprint("Found module");
Sprint(Degree(MinimalPolynomial(dm[1], Fq)));
//dm := [L.1^5 + Fq.1*L.1^4, (Fq.1 + 1)*L.1^5 + L.1^4 + Fq.1*L.1^3 + Fq.1*L.1^2 + Fq.1*L.1 + 1, L.1^5 + (Fq.1 + 1)*L.1^4 + (Fq.1 + 1)*L.1, Fq.1*L.1^5 + (Fq.1 + 1)*L.1^4 + (Fq.1 + 1)*L.1 + 1];
Lp<y> := PolynomialRing(L);
ML_r := MatrixRing(L, r);
MLp_r := MatrixRing(Lp, r);

/* Performs coefficient-wise frobenius frob_iter times */
function frob_poly(poly, frob_iter, L, coeff_ring)
	return coeff_ring![ L | Frobenius(a, frob_iter): a in Coefficients(poly) ];
end function;

/* 
creates matrix with 1s on the lower diagonal and with the recurrence
coefficients on the top row with the frobenius applied frob_iter times
*/
function init_matr(dm, frob_iter, r, coeff_ring)
        matr := ZeroMatrix(coeff_ring, r, r);
        for i := 1 to r do
                matr[1,i] := Frobenius((-1)*dm[r - i + 1]/dm[r + 1], frob_iter);
        end for;
        for i := 1 to r - 1 do
                matr[i+1, i] := 1;
        end for;
        matr[1, r] +:= (1/(Frobenius(dm[r + 1], frob_iter)))*coeff_ring.1;
        return matr;
end function;

function power_reduce(C, expo, modulus, L, ring)
        m := NumberOfRows(C);
        n := NumberOfColumns(C);
        prmatr := ZeroMatrix(ring, m, n);
        for i := 1 to m do
                for j := 1 to n do
			prmatr[i, j] := Polynomial(L, [L | Frobenius(c, expo) : c in Coefficients(C[i, j] mod modulus)]);
                end for;
        end for;
        return prmatr;
end function;

function crys_rec(dm, base, L, Lp, n, r, prec)
        local nstar;
        nstar := Isqrt(n*prec);
        if nstar^2 lt (n*prec)^2 then
                nstar +:= 1;
        end if;
        n1, n0 := Quotrem(n, nstar);

        /* Setting up the coefficient ring */
        poly_ring<v> := PolynomialRing(L);
        mu := (v - dm[1])^prec;
        mu_coeffs := Coefficients(mu);
        // coeff_ring := quo< c1 | idl >;

        /* Setting up matrices for recurrence computation */
        C0 := IdentityMatrix(poly_ring, r);
        C := IdentityMatrix(poly_ring, r);
        for i := n0 to 1 by -1 do
                C0 *:= init_matr(dm, i, r, poly_ring);
        end for;
        for i := nstar + n0 to n0 + 1 by -1 do
                C *:= init_matr(dm, i, r, poly_ring);
        end for;
        moduli := [poly_ring | Polynomial(L, [ L | Frobenius(c, -i*nstar) : c in mu_coeffs  ]) : i in [1 .. n1 - 1]  ];
        power_reduc_matr := IdentityMatrix(L, r);
        for i := n1 - 1 to 1 by -1 do
                power_reduc_matr *:= power_reduce(C, i*nstar, moduli[i], L, poly_ring);
        end for;
        return power_reduc_matr*C0;
end function;
	

function char_poly_crys(dm, base, L, Lp, n, r, prec)
	frob_matr := crys_rec(dm, base, L, Lp, n, r, prec);
	Sprint("Finding char poly");
	return CharacteristicPolynomial(frob_matr);
	//return CharacteristicPolynomial(crys_rec(dm, base, L, Lp, n, r, prec));
end function;

// The equivalent of the "double replace" function
function mono_convert(poly, KQ)
        outer_coeffs := Coefficients(poly);
        res := 0;
        ctr := 0;
        for inner in outer_coeffs do
                res +:= Evaluate(Polynomial(inner), KQ.2)*KQ.3^ctr;
                ctr +:= 1;
        end for;
        return res;
end function;

function char_poly_crys2(dm, base, L, Lp, n, r, prec, L_mod)
        cp := CharacteristicPolynomial(crys_rec(dm, base, L, Lp, n, r, prec));
	/* Conversion step necessary for when the precision is less than n + 1 */
	KQ<r, t, T> := PolynomialRing(base, 3);
	mip := Evaluate(L_mod, t);
	ih := r - Evaluate(Polynomial(dm[1]), t);
	py := (T - r)^prec;
	idl := Ideal([mip, ih, py]);
	gb := GroebnerBasis(idl);
	//Qr := quo<KQ |Ideal(Append(gb, py)) >;
	Qr := quo< KQ | gb >;
	return [Qr | mono_convert(a, KQ) : a in Coefficients(cp)];
end function;	

function phi(dm, poly, L)
	

end function;

//cpp := char_poly_crys(dm, Fq, L, Lp, n, r, n + 1);
tt := Cputime();
//cpp2 := char_poly_crys2(dm, Fq, L, Lp, n, r, prec, L_mod);
Sprint("computing char poly");
//tt := Cputime();
cpp2 := char_poly_crys(dm, Fq, L, Lp, n, r, prec);
Sprint("done");
ttp := Cputime(tt);

PrintFile("cpol", cpp2);
PrintFile("time1", ttp);
