// Parameters (to be set programmatically eventually)
q := 4; // order of base field, must be prime power
n := 6; // extension degree of L over F_q
m := 2; // extension degree of intermediate field over F_q
r := 3; // drinfeld module rank
prec := n div m;

/* Algebraic Constructions */
Fq := FiniteField(q);
A<x> := PolynomialRing(Fq);
c := Fq.1;
L_mod := x^6 + (c + 1)*x^4 + x^3 + (c + 1)*x^2 + c*x + 1;
L := ext<Fq | L_mod>;
//dm := [L | Random(L): i in [0..r] ];
dm := [L.1^5 + Fq.1*L.1^4, (Fq.1 + 1)*L.1^5 + L.1^4 + Fq.1*L.1^3 + Fq.1*L.1^2 + Fq.1*L.1 + 1, L.1^5 + (Fq.1 + 1)*L.1^4 + (Fq.1 + 1)*L.1, Fq.1*L.1^5 + (Fq.1 + 1)*L.1^4 + (Fq.1 + 1)*L.1 + 1];
Lp<y> := PolynomialRing(L);
ML_r := MatrixRing(L, r);
MLp_r := MatrixRing(Lp, r);

phi_x := [dm];

/* Performs coefficient-wise frobenius frob_iter times */
function frob_poly(poly, frob_iter, L, coeff_ring)
	return coeff_ring![ L | Frobenius(a, frob_iter): a in Coefficients(poly) ];
end function;

/* Addition of two elements of a graded ring, represented as arrays */
function Sadd(arr1, arr2)
	sum_arr := [];
	degsum := Max(#arr1, #arr2);
	for i := 1 to degsum do
		temp := 0;
		if i lt #arr1 then
			temp +:= arr1[i];
		end if;
		if i lt # arr2 then
			temp +:= arr2[i];
		end if;
		Append(~sum_arr, temp);
	end for;
	return sum_arr;
end function;

/* Naive multiplication for testing */
function Smul(left, right, L)
	pdeg := #left + #right - 2;
	prod := [L | 0 : i in [0..pdeg] ];
	for i:= 0 to pdeg do
		for j := 0 to i do
			if j lt #left and (i - j) lt #right then 
				prod[i + 1] +:= left[j + 1]*Frobenius(right[i - j + 1], j);
			end if;
		end for;  
	end for;
	return prod;
end function;

/* Zip function for creating paired array. If arrays are not the same size, it zips only up to the
   minimum size
 */
function Zip(arr1, arr2)
	min_size := Min(#arr1, #arr2);
	zip_arr := [];
	for i := 1 to min_size do
		Append(~zip_arr,(arr1[i], arr2[i]));
	end for;
	return zip_arr;
end function;


/* Computes the array of phi_x^i up to degree deg; pass in previously computed terms to extend  */
function _phi_x(deg, dm, r, L, phi_x_list)
	ext := #phi_x_list;
	if deg lt ext then
		return phi_x_list;
	end if;
	for i := ext + 1 to deg do
		Append(~phi_x_list, [0 : j in [0 .. r*i] ]);
	end for;
	Sprint(phi_x_list);

	for i:= Max(2, ext) to deg do
		for j := 0 to r*i do
			low_deg := Max(j - r*(i-1), 0);
			high_deg := Min(r, j);
			recs := [Frobenius(phi_x_list[i-1][j - k + 1], k) : k in [low_deg .. high_deg ] ];
			sum_prod := 0;
			for k := low_deg to high_deg do
				sum_prod +:= phi_x_list[1][k + 1]*recs[k - low_deg + 1];
			end for; 
			phi_x_list[i][j + 1] :=  sum_prod;
		end for;
	end for;
	return phi_x_list;	
end function;


/* 
creates matrix with 1s on the lower diagonal and with the recurrence
coefficients on the top row with the frobenius applied frob_iter times
*/
function init_matr(dm, frob_iter, r, coeff_ring)
	matr := ZeroMatrix(coeff_ring, r, r);
        for i := 1 to r do
                matr[1,i] := Frobenius((-1)*dm[r - i + 1]/dm[r + 1], frob_iter);
        end for;
        for i := 1 to r - 1 do
                matr[i+1, i] := 1;
        end for;
        matr[1, r] +:= (1/(Frobenius(dm[r + 1], frob_iter)))*coeff_ring.1;
        return matr;
end function;


function power_reduce(C, expo, modulus, L, ring)
	m := NumberOfRows(C);
	n := NumberOfColumns(C);
	prmatr := ZeroMatrix(ring, m, n);
	for i := 1 to m do
		for j := 1 to n do
			prmatr[i, j] := ring([L | Frobenius(c, expo) : c in Coefficients(C[i, j] mod modulus)]);
		end for;
	end for;
	return prmatr;
end function;

function crys_rec(dm, base, L, Lp, n, r, prec)
	local nstar;
	nstar := Isqrt(n*prec);
	if nstar^2 lt (n*prec)^2 then
		nstar +:= 1;
	end if;
	n1, n0 := Quotrem(n, nstar);
	
	/* Setting up the coefficient ring */
	poly_ring<v> := PolynomialRing(L);
	mu := (v - dm[1])^prec;
	mu_coeffs := Coefficients(mu);
	// coeff_ring := quo< c1 | idl >;

	/* Setting up matrices for recurrence computation */
	C0 := IdentityMatrix(poly_ring, r);
	C := IdentityMatrix(poly_ring, r);
	for i := n0 to 1 by -1 do
		C0 *:= init_matr(dm, i, r, poly_ring);
	end for;
	for i := nstar + n0 to n0 + 1 by -1 do
		C *:= init_matr(dm, i, r, poly_ring);
	end for;
	moduli := [poly_ring | poly_ring([ L | Frobenius(c, -i*nstar) : c in mu_coeffs  ]) : i in [1 .. n1 - 1]  ];
	power_reduc_matr := IdentityMatrix(L, r);
	for i := n1 - 1 to 1 by -1 do
		power_reduc_matr *:= power_reduce(C, i*nstar, moduli[i], L, poly_ring);
	end for;
	return power_reduc_matr*C0;
end function;
	

function char_poly_crys(dm, base, L, Lp, n, r, prec)
	return CharacteristicPolynomial(crys_rec(dm, base, L, Lp, n, r, prec));
end function;

function char_poly_crys2(dm, base, L, Lp, n, r, prec, L_mod)
        cp := CharacteristicPolynomial(crys_rec(dm, base, L, Lp, n, r, prec));
	/* Conversion step necessary for when the precision is less than n + 1 */
	KQ<r, t, T> := PolynomialRing(base, 3);
	mip := Evaluate(L_mod, t);
	ih := r - Evaluate(Polynomial(dm[1]), t);
	py := (T - r)^prec;
	idl := Ideal([mip, ih, py]);
	gb := GroebnerBasis(idl);
	//Qr := quo<KQ |Ideal(Append(gb, py)) >;
	Qr := quo< KQ | gb >;
	return [Qr | mono_convert(a, KQ) : a in Coefficients(cp)];
end function;	

// The equivalent of the "double replace" function
function mono_convert(poly, KQ)
	outer_coeffs := Coefficients(poly);
	res := 0;
	ctr := 0;
	for inner in outer_coeffs do
		res +:= Evaluate(Polynomial(inner), KQ.2)*KQ.3^ctr;
		ctr +:= 1;
	end for;
	return res;
end function;


cpp := char_poly_crys(dm, Fq, L, Lp, n, r, n + 1);
//cpp2 := char_poly_crys2(dm, Fq, L, Lp, n, r, prec, L_mod);
//tt := time char_poly_crys(dm, Fq, L, Lp, n, r, n + 1);

